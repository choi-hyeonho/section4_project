import pickle
import pandas as pd
import numpy as np
from keras.models import Sequential
from keras.layers import LSTM, Dropout, Dense
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt

# 데이터 로딩
data = pd.DataFrame({
    '날짜': ['2021.06.09', '2021.06.10', '2021.06.11', '2021.06.14', '2021.06.15', '2021.06.16', '2021.06.17', '2021.06.18', '2021.06.21', '2021.06.22', '2021.06.23', '2021.06.24', '2021.06.25', '2021.06.28', '2021.06.29', '2021.06.30', '2021.07.01', '2021.07.02', '2021.07.05', '2021.07.06', '2021.07.07', '2021.07.08', '2021.07.09', '2021.07.12', '2021.07.13', '2021.07.14', '2021.07.15', '2021.07.16', '2021.07.19', '2021.07.20', '2021.07.21', '2021.07.22', '2021.07.23', '2021.07.26', '2021.07.27', '2021.07.28', '2021.07.29', '2021.07.30', '2021.08.02', '2021.08.03', '2021.08.04', '2021.08.05', '2021.08.06', '2021.08.09', '2021.08.10', '2021.08.11', '2021.08.12', '2021.08.13', '2021.08.17', '2021.08.18', '2021.08.19', '2021.08.20', '2021.08.23', '2021.08.24', '2021.08.25', '2021.08.26', '2021.08.27', '2021.08.30', '2021.08.31', '2021.09.01', '2021.09.02', '2021.09.03', '2021.09.06', '2021.09.07', '2021.09.08', '2021.09.09', '2021.09.10', '2021.09.13', '2021.09.14', '2021.09.15', '2021.09.16', '2021.09.17', '2021.09.23', '2021.09.24', '2021.09.27', '2021.09.28', '2021.09.29', '2021.09.30', '2021.10.01', '2021.10.05', '2021.10.06', '2021.10.07', '2021.10.08', '2021.10.12', '2021.10.13', '2021.10.14', '2021.10.15', '2021.10.18', '2021.10.19', '2021.10.20', '2021.10.21', '2021.10.22', '2021.10.25', '2021.10.26', '2021.10.27', '2021.10.28', '2021.10.29', '2021.11.01', '2021.11.02', '2021.11.03', '2021.11.04', '2021.11.05', '2021.11.08', '2021.11.09', '2021.11.10', '2021.11.11', '2021.11.12', '2021.11.15', '2021.11.16', '2021.11.17', '2021.11.18', '2021.11.19', '2021.11.22', '2021.11.23', '2021.11.24', '2021.11.25', '2021.11.26', '2021.11.29', '2021.11.30', '2021.12.01', '2021.12.02', '2021.12.03', '2021.12.06', '2021.12.07', '2021.12.08', '2021.12.09', '2021.12.10', '2021.12.13', '2021.12.14', '2021.12.15', '2021.12.16', '2021.12.17', '2021.12.20', '2021.12.21', '2021.12.22', '2021.12.23', '2021.12.24', '2021.12.27', '2021.12.28', '2021.12.29', '2021.12.30', '2022.01.03', '2022.01.04', '2022.01.05', '2022.01.06', '2022.01.07', '2022.01.10', '2022.01.11', '2022.01.12', '2022.01.13', '2022.01.14', '2022.01.17', '2022.01.18', '2022.01.19', '2022.01.20', '2022.01.21', '2022.01.24', '2022.01.25', '2022.01.26', '2022.01.27', '2022.01.28', '2022.02.03', '2022.02.04', '2022.02.07', '2022.02.08', '2022.02.09', '2022.02.10', '2022.02.11', '2022.02.14', '2022.02.15', '2022.02.16', '2022.02.17', '2022.02.18', '2022.02.21', '2022.02.22', '2022.02.23', '2022.02.24', '2022.02.25', '2022.02.28', '2022.03.02', '2022.03.03', '2022.03.04', '2022.03.07', '2022.03.08', '2022.03.10', '2022.03.11', '2022.03.14', '2022.03.15', '2022.03.16', '2022.03.17', '2022.03.18', '2022.03.21', '2022.03.22', '2022.03.23', '2022.03.24', '2022.03.25', '2022.03.28', '2022.03.29', '2022.03.30', '2022.03.31', '2022.04.01', '2022.04.04', '2022.04.05', '2022.04.06', '2022.04.07', '2022.04.08', '2022.04.11', '2022.04.12', '2022.04.13', '2022.04.14', '2022.04.15', '2022.04.18', '2022.04.19', '2022.04.20', '2022.04.21', '2022.04.22', '2022.04.25', '2022.04.26', '2022.04.27', '2022.04.28', '2022.04.29', '2022.05.02', '2022.05.03', '2022.05.04', '2022.05.06', '2022.05.09', '2022.05.10', '2022.05.11', '2022.05.12', '2022.05.13', '2022.05.16', '2022.05.17', '2022.05.18', '2022.05.19', '2022.05.20', '2022.05.23', '2022.05.24', '2022.05.25', '2022.05.26', '2022.05.27', '2022.05.30', '2022.05.31', '2022.06.02', '2022.06.03', '2022.06.07', '2022.06.08', '2022.06.09', '2022.06.10', '2022.06.13', '2022.06.14', '2022.06.15', '2022.06.16', '2022.06.17', '2022.06.20', '2022.06.21', '2022.06.22', '2022.06.23', '2022.06.24', '2022.06.27', '2022.06.28', '2022.06.29', '2022.06.30', '2022.07.01', '2022.07.04', '2022.07.05', '2022.07.06', '2022.07.07', '2022.07.08', '2022.07.11', '2022.07.12', '2022.07.13', '2022.07.14', '2022.07.15', '2022.07.18', '2022.07.19', '2022.07.20', '2022.07.21', '2022.07.22', '2022.07.25', '2022.07.26', '2022.07.27', '2022.07.28', '2022.07.29', '2022.08.01', '2022.08.02', '2022.08.03', '2022.08.04', '2022.08.05', '2022.08.08', '2022.08.09', '2022.08.10', '2022.08.11', '2022.08.12', '2022.08.16', '2022.08.17', '2022.08.18', '2022.08.19', '2022.08.22', '2022.08.23', '2022.08.24', '2022.08.25', '2022.08.26', '2022.08.29', '2022.08.30', '2022.08.31', '2022.09.01', '2022.09.02', '2022.09.05', '2022.09.06', '2022.09.07', '2022.09.08', '2022.09.13', '2022.09.14', '2022.09.15', '2022.09.16', '2022.09.19', '2022.09.20', '2022.09.21', '2022.09.22', '2022.09.23', '2022.09.26', '2022.09.27', '2022.09.28', '2022.09.29', '2022.09.30', '2022.10.04', '2022.10.05', '2022.10.06', '2022.10.07', '2022.10.11', '2022.10.12', '2022.10.13', '2022.10.14', '2022.10.17', '2022.10.18', '2022.10.19', '2022.10.20', '2022.10.21', '2022.10.24', '2022.10.25', '2022.10.26', '2022.10.27', '2022.10.28', '2022.10.31', '2022.11.01', '2022.11.02', '2022.11.03', '2022.11.04', '2022.11.07', '2022.11.08', '2022.11.09', '2022.11.10', '2022.11.11', '2022.11.14', '2022.11.15', '2022.11.16', '2022.11.17', '2022.11.18', '2022.11.21', '2022.11.22', '2022.11.23', '2022.11.24', '2022.11.25', '2022.11.28', '2022.11.29', '2022.11.30', '2022.12.01', '2022.12.02', '2022.12.05', '2022.12.06', '2022.12.07', '2022.12.08', '2022.12.09', '2022.12.12', '2022.12.13', '2022.12.14', '2022.12.15', '2022.12.16', '2022.12.19', '2022.12.20', '2022.12.21', '2022.12.22', '2022.12.23', '2022.12.26', '2022.12.27', '2022.12.28', '2022.12.29', '2023.01.02', '2023.01.03', '2023.01.04', '2023.01.05', '2023.01.06', '2023.01.09', '2023.01.10', '2023.01.11', '2023.01.12', '2023.01.13', '2023.01.16', '2023.01.17', '2023.01.18', '2023.01.19', '2023.01.20', '2023.01.25', '2023.01.26', '2023.01.27', '2023.01.30', '2023.01.31', '2023.02.01', '2023.02.02', '2023.02.03', '2023.02.06', '2023.02.07', '2023.02.08', '2023.02.09', '2023.02.10', '2023.02.13', '2023.02.14', '2023.02.15', '2023.02.16', '2023.02.17', '2023.02.20', '2023.02.21', '2023.02.22', '2023.02.23', '2023.02.24', '2023.02.27', '2023.02.28', '2023.03.02', '2023.03.03', '2023.03.06', '2023.03.07', '2023.03.08', '2023.03.09', '2023.03.10', '2023.03.13', '2023.03.14', '2023.03.15', '2023.03.16', '2023.03.17', '2023.03.20', '2023.03.21', '2023.03.22', '2023.03.23', '2023.03.24', '2023.03.27', '2023.03.28', '2023.03.29', '2023.03.30', '2023.03.31', '2023.04.03', '2023.04.04', '2023.04.05', '2023.04.06', '2023.04.07', '2023.04.10', '2023.04.11', '2023.04.12', '2023.04.13', '2023.04.14', '2023.04.17', '2023.04.18', '2023.04.19', '2023.04.20', '2023.04.21', '2023.04.24', '2023.04.25', '2023.04.26', '2023.04.27', '2023.04.28', '2023.05.02', '2023.05.03', '2023.05.04', '2023.05.08', '2023.05.09', '2023.05.10', '2023.05.11', '2023.05.12', '2023.05.15', '2023.05.16', '2023.05.17', '2023.05.18', '2023.05.19', '2023.05.22', '2023.05.23', '2023.05.24', '2023.05.25', '2023.05.26', '2023.05.30', '2023.05.31', '2023.06.01', '2023.06.02', '2023.06.05', '2023.06.07', '2023.06.08', '2023.06.09', '2023.06.12', '2023.06.13', '2023.06.14', '2023.06.15', '2023.06.16'],
    '종가': [81100.0, 81000.0, 81000.0, 80500.0, 80900.0, 81800.0, 80900.0, 80500.0, 79900.0, 80000.0, 80100.0, 81200.0, 81600.0, 81900.0, 81000.0, 80700.0, 80100.0, 80000.0, 80400.0, 81200.0, 80800.0, 79900.0, 79400.0, 79700.0, 79800.0, 79500.0, 80600.0, 79800.0, 79000.0, 79000.0, 78500.0, 79700.0, 79300.0, 78800.0, 78500.0, 79200.0, 79000.0, 78500.0, 79300.0, 81400.0, 82900.0, 82100.0, 81500.0, 81500.0, 80200.0, 78500.0, 77000.0, 74400.0, 74200.0, 73900.0, 73100.0, 72700.0, 73300.0, 75600.0, 75700.0, 74600.0, 74300.0, 74600.0, 76700.0, 76800.0, 76000.0, 76600.0, 77300.0, 76100.0, 76300.0, 75300.0, 75300.0, 76300.0, 76600.0, 77000.0, 76100.0, 77200.0, 77400.0, 77300.0, 77700.0, 76300.0, 74100.0, 74100.0, 73200.0, 72200.0, 71300.0, 71600.0, 71500.0, 69000.0, 68800.0, 69400.0, 70100.0, 70200.0, 70600.0, 70300.0, 70200.0, 70400.0, 70200.0, 71100.0, 70100.0, 70700.0, 69800.0, 69900.0, 71500.0, 70400.0, 70600.0, 70200.0, 70600.0, 70500.0, 70200.0, 69900.0, 70600.0, 71400.0, 71300.0, 70700.0, 70200.0, 71200.0, 74900.0, 75300.0, 74800.0, 73700.0, 72300.0, 72300.0, 71300.0, 74400.0, 75800.0, 75600.0, 76300.0, 77400.0, 77400.0, 78200.0, 76900.0, 76800.0, 77000.0, 77600.0, 77800.0, 78000.0, 77100.0, 78100.0, 79400.0, 79900.0, 80500.0, 80200.0, 80300.0, 78800.0, 78300.0, 78600.0, 78700.0, 77400.0, 76900.0, 78300.0, 78000.0, 78900.0, 78900.0, 77900.0, 77300.0, 77500.0, 77000.0, 76300.0, 76500.0, 75600.0, 75100.0, 74000.0, 73300.0, 71300.0, 73300.0, 73300.0, 74000.0, 73000.0, 73500.0, 74700.0, 75400.0, 74900.0, 73700.0, 73700.0, 74800.0, 75000.0, 74300.0, 74200.0, 73400.0, 73000.0, 71500.0, 71900.0, 72100.0, 71700.0, 72900.0, 71500.0, 70100.0, 69500.0, 71200.0, 70000.0, 70200.0, 69500.0, 70400.0, 71200.0, 70700.0, 69900.0, 70300.0, 70500.0, 69800.0, 69800.0, 69700.0, 70200.0, 69900.0, 69600.0, 69100.0, 69300.0, 69200.0, 68500.0, 68000.0, 67800.0, 67900.0, 67000.0, 68700.0, 67500.0, 66600.0, 66700.0, 67300.0, 67400.0, 67700.0, 67000.0, 66300.0, 66100.0, 65000.0, 64800.0, 67400.0, 67300.0, 67500.0, 67900.0, 66500.0, 66100.0, 65700.0, 65700.0, 64900.0, 66500.0, 66300.0, 67600.0, 68100.0, 67500.0, 68000.0, 67900.0, 66500.0, 66400.0, 65900.0, 66500.0, 67700.0, 67400.0, 66700.0, 66800.0, 65500.0, 65300.0, 65200.0, 63800.0, 62100.0, 61900.0, 60700.0, 60900.0, 59800.0, 58700.0, 58500.0, 57600.0, 57400.0, 58400.0, 58800.0, 59400.0, 58000.0, 57000.0, 56200.0, 57100.0, 57200.0, 56400.0, 58200.0, 58700.0, 58800.0, 58100.0, 58000.0, 57500.0, 60000.0, 61900.0, 60900.0, 60500.0, 61800.0, 61300.0, 61100.0, 61700.0, 61800.0, 61900.0, 61400.0, 61300.0, 61700.0, 61300.0, 61500.0, 61500.0, 60800.0, 60000.0, 59100.0, 59900.0, 60200.0, 61000.0, 60400.0, 61500.0, 60900.0, 60000.0, 59100.0, 59000.0, 59700.0, 60000.0, 58600.0, 58800.0, 59700.0, 58400.0, 57500.0, 57100.0, 57100.0, 56000.0, 55600.0, 58100.0, 56800.0, 56000.0, 56200.0, 56400.0, 55800.0, 55300.0, 54400.0, 54500.0, 53900.0, 54200.0, 52900.0, 52600.0, 53100.0, 55200.0, 56000.0, 56300.0, 56200.0, 55400.0, 55800.0, 55200.0, 56300.0, 56600.0, 56500.0, 55800.0, 55500.0, 55900.0, 57500.0, 57700.0, 59400.0, 59500.0, 57300.0, 59400.0, 60000.0, 59600.0, 59200.0, 59400.0, 60200.0, 61800.0, 62000.0, 60400.0, 62900.0, 61900.0, 62400.0, 62700.0, 61400.0, 61800.0, 61400.0, 60600.0, 61000.0, 61400.0, 61000.0, 60100.0, 60600.0, 62200.0, 62600.0, 60400.0, 60300.0, 59200.0, 58900.0, 59200.0, 60400.0, 59500.0, 59700.0, 60500.0, 59300.0, 59500.0, 59500.0, 58600.0, 58000.0, 59100.0, 58100.0, 57900.0, 58100.0, 56600.0, 55300.0, 55500.0, 55400.0, 57800.0, 58200.0, 59000.0, 60700.0, 60400.0, 60500.0, 60500.0, 60800.0, 61100.0, 61000.0, 60400.0, 61500.0, 61800.0, 63400.0, 63900.0, 64600.0, 63300.0, 61000.0, 61800.0, 63500.0, 63800.0, 61600.0, 61900.0, 63100.0, 63000.0, 62800.0, 62900.0, 63200.0, 62200.0, 63700.0, 62600.0, 62700.0, 62100.0, 61100.0, 62000.0, 61300.0, 60500.0, 60600.0, 60800.0, 60500.0, 61500.0, 60700.0, 60300.0, 60100.0, 59500.0, 60000.0, 59000.0, 59800.0, 59900.0, 61300.0, 60200.0, 60300.0, 61100.0, 62300.0, 63000.0, 62100.0, 62900.0, 62700.0, 63200.0, 64000.0, 63100.0, 63600.0, 63900.0, 62300.0, 65000.0, 65700.0, 65900.0, 66000.0, 66100.0, 65100.0, 65300.0, 65600.0, 65500.0, 65300.0, 65700.0, 65200.0, 63600.0, 64100.0, 64600.0, 65500.0, 65700.0, 65400.0, 65100.0, 65900.0, 65300.0, 64600.0, 64200.0, 64100.0, 64500.0, 65400.0, 65000.0, 66200.0, 68400.0, 68500.0, 68400.0, 68500.0, 68800.0, 70300.0, 72300.0, 71400.0, 70900.0, 72200.0, 71700.0, 71000.0, 70900.0, 72000.0, 71000.0, 72000.0, 71900.0, 71500.0, 71200.0]
})

# 데이터 전처리
data['종가'] = data['종가'].shift(-1)  # 종가를 한 행씩 뒤로 Shift
data = data.dropna()  # NaN 값을 제거
prices = data['종가'].values  # 종가 데이터를 numpy 배열로 변환
prices = prices.reshape(-1, 1)  # 2차원 배열로 변환

# 데이터 분할
train_size = int(len(prices) * 0.8)  # 학습 데이터의 크기 설정
train_data = prices[:train_size]  # 학습 데이터
test_data = prices[train_size:]  # 테스트 데이터

# 데이터 스케일링
scaler = MinMaxScaler(feature_range=(0, 1))
train_data = scaler.fit_transform(train_data)
test_data = scaler.transform(test_data)

# 학습 데이터 생성
def create_dataset(dataset, lookback):
    X, Y = [], []
    for i in range(len(dataset) - lookback):
        X.append(dataset[i:i + lookback, 0])
        Y.append(dataset[i + lookback, 0])
    return np.array(X), np.array(Y)

lookback = 30  # 입력 시퀀스의 길이 설정
train_x, train_y = create_dataset(train_data, lookback)
test_x, test_y = create_dataset(test_data, lookback)

# 모델 구조
model = Sequential()
model.add(LSTM(512, input_shape=(lookback, 1)))
model.add(Dropout(0.2))
model.add(Dense(1, activation='tanh'))
# 오차 및 최적화기 설정
model.compile(loss='mse', optimizer='rmsprop', metrics=['mae', 'mape'])
model.summary()

# 모델 학습 (history = model.fit()을 수행한 결과로 가정)
history = model.fit(train_x, train_y, epochs=100, batch_size=32, verbose=1)

# 테스트 데이터에 대한 예측
predictions = model.predict(test_x)
predictions = scaler.inverse_transform(predictions)  # 스케일링 복원
test_y = scaler.inverse_transform([test_y])  # 스케일링 복원

# 예측 결과 시각화
plt.figure(figsize=(12, 6))
plt.plot(test_y[0], label='Actual')
plt.plot(predictions[:, 0], label='Predicted')
plt.legend()
plt.show()

# 새로운 종가 데이터 80000을 가진 샘플을 선택하고 해당 샘플을 모뎉을 통해 예측
X_test = np.array([[4000]])  # 입력 데이터 형태에 맞게 numpy 배열로 변환
y_pred = model.predict(X_test)

# y_pred는 예측 가격
y_pred = scaler.inverse_transform(y_pred)  # 스케일링 복원



# 모델을 피클링하여 저장
model_filename = 'model.pkl'
with open(model_filename, 'wb') as file:
    pickle.dump(model, file)

# 저장된 모델을 로드
with open(model_filename, 'rb') as file:
    loaded_model = pickle.load(file)